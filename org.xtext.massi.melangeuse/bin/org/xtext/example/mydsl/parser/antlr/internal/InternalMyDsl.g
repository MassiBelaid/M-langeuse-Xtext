/*
 * generated by Xtext 2.19.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getFeaturesFeatureParserRuleCall_0());
			}
			lv_features_0_0=ruleFeature
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"features",
					lv_features_0_0,
					"org.xtext.example.mydsl.MyDsl.Feature");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	iv_ruleFeature=ruleFeature
	{ $current=$iv_ruleFeature.current; }
	EOF;

// Rule Feature
ruleFeature returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getScanParserRuleCall_0());
		}
		this_Scan_0=ruleScan
		{
			$current = $this_Scan_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getMoveParserRuleCall_1());
		}
		this_Move_1=ruleMove
		{
			$current = $this_Move_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getFiltParserRuleCall_2());
		}
		this_Filt_2=ruleFilt
		{
			$current = $this_Filt_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getSuckParserRuleCall_3());
		}
		this_Suck_3=ruleSuck
		{
			$current = $this_Suck_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getBlowParserRuleCall_4());
		}
		this_Blow_4=ruleBlow
		{
			$current = $this_Blow_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getOpenParserRuleCall_5());
		}
		this_Open_5=ruleOpen
		{
			$current = $this_Open_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getShutParserRuleCall_6());
		}
		this_Shut_6=ruleShut
		{
			$current = $this_Shut_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getFeatureAccess().getWaitParserRuleCall_7());
		}
		this_Wait_7=ruleWait
		{
			$current = $this_Wait_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleScan
entryRuleScan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScanRule()); }
	iv_ruleScan=ruleScan
	{ $current=$iv_ruleScan.current; }
	EOF;

// Rule Scan
ruleScan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_fun_0_0='scan'
				{
					newLeafNode(lv_fun_0_0, grammarAccess.getScanAccess().getFunScanKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScanRule());
					}
					setWithLastConsumed($current, "fun", lv_fun_0_0, "scan");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getScanAccess().getCompComparaisonParserRuleCall_1_0());
				}
				lv_comp_1_0=ruleComparaison
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScanRule());
					}
					set(
						$current,
						"comp",
						lv_comp_1_0,
						"org.xtext.example.mydsl.MyDsl.Comparaison");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_value_2_0=RULE_INT
				{
					newLeafNode(lv_value_2_0, grammarAccess.getScanAccess().getValueINTTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScanRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_3=':'
		{
			newLeafNode(otherlv_3, grammarAccess.getScanAccess().getColonKeyword_3());
		}
		(
			(
				lv_valuereturn_4_0=RULE_INT
				{
					newLeafNode(lv_valuereturn_4_0, grammarAccess.getScanAccess().getValuereturnINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScanRule());
					}
					setWithLastConsumed(
						$current,
						"valuereturn",
						lv_valuereturn_4_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	iv_ruleMove=ruleMove
	{ $current=$iv_ruleMove.current; }
	EOF;

// Rule Move
ruleMove returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_fun_0_0='move'
				{
					newLeafNode(lv_fun_0_0, grammarAccess.getMoveAccess().getFunMoveKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveRule());
					}
					setWithLastConsumed($current, "fun", lv_fun_0_0, "move");
				}
			)
		)
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getMoveAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMoveRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getMoveAccess().getCompComparaisonParserRuleCall_2_0_0());
					}
					lv_comp_2_0=ruleComparaison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMoveRule());
						}
						set(
							$current,
							"comp",
							lv_comp_2_0,
							"org.xtext.example.mydsl.MyDsl.Comparaison");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_valuereturn_3_0=RULE_INT
					{
						newLeafNode(lv_valuereturn_3_0, grammarAccess.getMoveAccess().getValuereturnINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMoveRule());
						}
						setWithLastConsumed(
							$current,
							"valuereturn",
							lv_valuereturn_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleFilt
entryRuleFilt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFiltRule()); }
	iv_ruleFilt=ruleFilt
	{ $current=$iv_ruleFilt.current; }
	EOF;

// Rule Filt
ruleFilt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_fun_0_0='filt'
				{
					newLeafNode(lv_fun_0_0, grammarAccess.getFiltAccess().getFunFiltKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFiltRule());
					}
					setWithLastConsumed($current, "fun", lv_fun_0_0, "filt");
				}
			)
		)
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getFiltAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFiltRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getFiltAccess().getCompComparaisonParserRuleCall_2_0_0());
					}
					lv_comp_2_0=ruleComparaison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getFiltRule());
						}
						set(
							$current,
							"comp",
							lv_comp_2_0,
							"org.xtext.example.mydsl.MyDsl.Comparaison");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_valuereturn_3_0=RULE_INT
					{
						newLeafNode(lv_valuereturn_3_0, grammarAccess.getFiltAccess().getValuereturnINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFiltRule());
						}
						setWithLastConsumed(
							$current,
							"valuereturn",
							lv_valuereturn_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparaison
entryRuleComparaison returns [String current=null]:
	{ newCompositeNode(grammarAccess.getComparaisonRule()); }
	iv_ruleComparaison=ruleComparaison
	{ $current=$iv_ruleComparaison.current.getText(); }
	EOF;

// Rule Comparaison
ruleComparaison returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparaisonAccess().getLessThanSignKeyword_0());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparaisonAccess().getGreaterThanSignKeyword_1());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparaisonAccess().getLessThanSignEqualsSignKeyword_2());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparaisonAccess().getGreaterThanSignEqualsSignKeyword_3());
		}
		    |
		kw='=='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparaisonAccess().getEqualsSignEqualsSignKeyword_4());
		}
		    |
		kw='!='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getComparaisonAccess().getExclamationMarkEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleSuck
entryRuleSuck returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSuckRule()); }
	iv_ruleSuck=ruleSuck
	{ $current=$iv_ruleSuck.current; }
	EOF;

// Rule Suck
ruleSuck returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_fun_0_0='suck'
				{
					newLeafNode(lv_fun_0_0, grammarAccess.getSuckAccess().getFunSuckKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSuckRule());
					}
					setWithLastConsumed($current, "fun", lv_fun_0_0, "suck");
				}
			)
		)
		(
			(
				(
					lv_value_1_0=RULE_INT
					{
						newLeafNode(lv_value_1_0, grammarAccess.getSuckAccess().getValueINTTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSuckRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			    |
			(
				(
					lv_valeur_2_0=RULE_DOUBLE
					{
						newLeafNode(lv_valeur_2_0, grammarAccess.getSuckAccess().getValeurDOUBLETerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSuckRule());
						}
						setWithLastConsumed(
							$current,
							"valeur",
							lv_valeur_2_0,
							"org.xtext.example.mydsl.MyDsl.DOUBLE");
					}
				)
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSuckAccess().getCompComparaisonParserRuleCall_2_0_0());
					}
					lv_comp_3_0=ruleComparaison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSuckRule());
						}
						set(
							$current,
							"comp",
							lv_comp_3_0,
							"org.xtext.example.mydsl.MyDsl.Comparaison");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_valuereturn_4_0=RULE_INT
					{
						newLeafNode(lv_valuereturn_4_0, grammarAccess.getSuckAccess().getValuereturnINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSuckRule());
						}
						setWithLastConsumed(
							$current,
							"valuereturn",
							lv_valuereturn_4_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBlow
entryRuleBlow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlowRule()); }
	iv_ruleBlow=ruleBlow
	{ $current=$iv_ruleBlow.current; }
	EOF;

// Rule Blow
ruleBlow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_fun_0_0='blow'
				{
					newLeafNode(lv_fun_0_0, grammarAccess.getBlowAccess().getFunBlowKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBlowRule());
					}
					setWithLastConsumed($current, "fun", lv_fun_0_0, "blow");
				}
			)
		)
		(
			(
				(
					lv_value_1_0=RULE_INT
					{
						newLeafNode(lv_value_1_0, grammarAccess.getBlowAccess().getValueINTTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlowRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_1_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			    |
			(
				(
					lv_valeur_2_0=RULE_DOUBLE
					{
						newLeafNode(lv_valeur_2_0, grammarAccess.getBlowAccess().getValeurDOUBLETerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlowRule());
						}
						setWithLastConsumed(
							$current,
							"valeur",
							lv_valeur_2_0,
							"org.xtext.example.mydsl.MyDsl.DOUBLE");
					}
				)
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBlowAccess().getCompComparaisonParserRuleCall_2_0_0());
					}
					lv_comp_3_0=ruleComparaison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlowRule());
						}
						set(
							$current,
							"comp",
							lv_comp_3_0,
							"org.xtext.example.mydsl.MyDsl.Comparaison");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_valuereturn_4_0=RULE_INT
					{
						newLeafNode(lv_valuereturn_4_0, grammarAccess.getBlowAccess().getValuereturnINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getBlowRule());
						}
						setWithLastConsumed(
							$current,
							"valuereturn",
							lv_valuereturn_4_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOpen
entryRuleOpen returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpenRule()); }
	iv_ruleOpen=ruleOpen
	{ $current=$iv_ruleOpen.current; }
	EOF;

// Rule Open
ruleOpen returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_fun_0_0='open'
				{
					newLeafNode(lv_fun_0_0, grammarAccess.getOpenAccess().getFunOpenKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOpenRule());
					}
					setWithLastConsumed($current, "fun", lv_fun_0_0, "open");
				}
			)
		)
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getOpenAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOpenRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getOpenAccess().getCompComparaisonParserRuleCall_2_0_0());
					}
					lv_comp_2_0=ruleComparaison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOpenRule());
						}
						set(
							$current,
							"comp",
							lv_comp_2_0,
							"org.xtext.example.mydsl.MyDsl.Comparaison");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_valuereturn_3_0=RULE_INT
					{
						newLeafNode(lv_valuereturn_3_0, grammarAccess.getOpenAccess().getValuereturnINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOpenRule());
						}
						setWithLastConsumed(
							$current,
							"valuereturn",
							lv_valuereturn_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleShut
entryRuleShut returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getShutRule()); }
	iv_ruleShut=ruleShut
	{ $current=$iv_ruleShut.current; }
	EOF;

// Rule Shut
ruleShut returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_fun_0_0='shut'
				{
					newLeafNode(lv_fun_0_0, grammarAccess.getShutAccess().getFunShutKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShutRule());
					}
					setWithLastConsumed($current, "fun", lv_fun_0_0, "shut");
				}
			)
		)
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getShutAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getShutRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getShutAccess().getCompComparaisonParserRuleCall_2_0_0());
					}
					lv_comp_2_0=ruleComparaison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getShutRule());
						}
						set(
							$current,
							"comp",
							lv_comp_2_0,
							"org.xtext.example.mydsl.MyDsl.Comparaison");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_valuereturn_3_0=RULE_INT
					{
						newLeafNode(lv_valuereturn_3_0, grammarAccess.getShutAccess().getValuereturnINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getShutRule());
						}
						setWithLastConsumed(
							$current,
							"valuereturn",
							lv_valuereturn_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleWait
entryRuleWait returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWaitRule()); }
	iv_ruleWait=ruleWait
	{ $current=$iv_ruleWait.current; }
	EOF;

// Rule Wait
ruleWait returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_fun_0_0='wait'
				{
					newLeafNode(lv_fun_0_0, grammarAccess.getWaitAccess().getFunWaitKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWaitRule());
					}
					setWithLastConsumed($current, "fun", lv_fun_0_0, "wait");
				}
			)
		)
		(
			(
				lv_value_1_0=RULE_INT
				{
					newLeafNode(lv_value_1_0, grammarAccess.getWaitAccess().getValueINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getWaitRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getWaitAccess().getCompComparaisonParserRuleCall_2_0_0());
					}
					lv_comp_2_0=ruleComparaison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWaitRule());
						}
						set(
							$current,
							"comp",
							lv_comp_2_0,
							"org.xtext.example.mydsl.MyDsl.Comparaison");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					lv_valuereturn_3_0=RULE_INT
					{
						newLeafNode(lv_valuereturn_3_0, grammarAccess.getWaitAccess().getValuereturnINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWaitRule());
						}
						setWithLastConsumed(
							$current,
							"valuereturn",
							lv_valuereturn_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
	)
;

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
