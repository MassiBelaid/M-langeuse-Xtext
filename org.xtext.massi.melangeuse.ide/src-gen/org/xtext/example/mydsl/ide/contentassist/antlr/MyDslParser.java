/*
 * generated by Xtext 2.19.0
 */
package org.xtext.example.mydsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.mydsl.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getFeatureAccess().getAlternatives(), "rule__Feature__Alternatives");
			builder.put(grammarAccess.getComparaisonAccess().getAlternatives(), "rule__Comparaison__Alternatives");
			builder.put(grammarAccess.getSuckAccess().getAlternatives_1(), "rule__Suck__Alternatives_1");
			builder.put(grammarAccess.getBlowAccess().getAlternatives_1(), "rule__Blow__Alternatives_1");
			builder.put(grammarAccess.getTaskAccess().getGroup(), "rule__Task__Group__0");
			builder.put(grammarAccess.getScanAccess().getGroup(), "rule__Scan__Group__0");
			builder.put(grammarAccess.getMoveAccess().getGroup(), "rule__Move__Group__0");
			builder.put(grammarAccess.getMoveAccess().getGroup_2(), "rule__Move__Group_2__0");
			builder.put(grammarAccess.getFiltAccess().getGroup(), "rule__Filt__Group__0");
			builder.put(grammarAccess.getFiltAccess().getGroup_2(), "rule__Filt__Group_2__0");
			builder.put(grammarAccess.getSuckAccess().getGroup(), "rule__Suck__Group__0");
			builder.put(grammarAccess.getSuckAccess().getGroup_2(), "rule__Suck__Group_2__0");
			builder.put(grammarAccess.getBlowAccess().getGroup(), "rule__Blow__Group__0");
			builder.put(grammarAccess.getBlowAccess().getGroup_2(), "rule__Blow__Group_2__0");
			builder.put(grammarAccess.getOpenAccess().getGroup(), "rule__Open__Group__0");
			builder.put(grammarAccess.getOpenAccess().getGroup_2(), "rule__Open__Group_2__0");
			builder.put(grammarAccess.getShutAccess().getGroup(), "rule__Shut__Group__0");
			builder.put(grammarAccess.getShutAccess().getGroup_2(), "rule__Shut__Group_2__0");
			builder.put(grammarAccess.getWaitAccess().getGroup(), "rule__Wait__Group__0");
			builder.put(grammarAccess.getWaitAccess().getGroup_2(), "rule__Wait__Group_2__0");
			builder.put(grammarAccess.getModelAccess().getFeaturesAssignment(), "rule__Model__FeaturesAssignment");
			builder.put(grammarAccess.getTaskAccess().getNameAssignment_1(), "rule__Task__NameAssignment_1");
			builder.put(grammarAccess.getTaskAccess().getFeaturesAssignment_3(), "rule__Task__FeaturesAssignment_3");
			builder.put(grammarAccess.getScanAccess().getFunAssignment_0(), "rule__Scan__FunAssignment_0");
			builder.put(grammarAccess.getScanAccess().getCompAssignment_1(), "rule__Scan__CompAssignment_1");
			builder.put(grammarAccess.getScanAccess().getValueAssignment_2(), "rule__Scan__ValueAssignment_2");
			builder.put(grammarAccess.getScanAccess().getValuereturnAssignment_4(), "rule__Scan__ValuereturnAssignment_4");
			builder.put(grammarAccess.getMoveAccess().getFunAssignment_0(), "rule__Move__FunAssignment_0");
			builder.put(grammarAccess.getMoveAccess().getValueAssignment_1(), "rule__Move__ValueAssignment_1");
			builder.put(grammarAccess.getMoveAccess().getCompAssignment_2_0(), "rule__Move__CompAssignment_2_0");
			builder.put(grammarAccess.getMoveAccess().getValuereturnAssignment_2_1(), "rule__Move__ValuereturnAssignment_2_1");
			builder.put(grammarAccess.getFiltAccess().getFunAssignment_0(), "rule__Filt__FunAssignment_0");
			builder.put(grammarAccess.getFiltAccess().getValueAssignment_1(), "rule__Filt__ValueAssignment_1");
			builder.put(grammarAccess.getFiltAccess().getCompAssignment_2_0(), "rule__Filt__CompAssignment_2_0");
			builder.put(grammarAccess.getFiltAccess().getValuereturnAssignment_2_1(), "rule__Filt__ValuereturnAssignment_2_1");
			builder.put(grammarAccess.getSuckAccess().getFunAssignment_0(), "rule__Suck__FunAssignment_0");
			builder.put(grammarAccess.getSuckAccess().getValueAssignment_1_0(), "rule__Suck__ValueAssignment_1_0");
			builder.put(grammarAccess.getSuckAccess().getValeurAssignment_1_1(), "rule__Suck__ValeurAssignment_1_1");
			builder.put(grammarAccess.getSuckAccess().getCompAssignment_2_0(), "rule__Suck__CompAssignment_2_0");
			builder.put(grammarAccess.getSuckAccess().getValuereturnAssignment_2_1(), "rule__Suck__ValuereturnAssignment_2_1");
			builder.put(grammarAccess.getBlowAccess().getFunAssignment_0(), "rule__Blow__FunAssignment_0");
			builder.put(grammarAccess.getBlowAccess().getValueAssignment_1_0(), "rule__Blow__ValueAssignment_1_0");
			builder.put(grammarAccess.getBlowAccess().getValeurAssignment_1_1(), "rule__Blow__ValeurAssignment_1_1");
			builder.put(grammarAccess.getBlowAccess().getCompAssignment_2_0(), "rule__Blow__CompAssignment_2_0");
			builder.put(grammarAccess.getBlowAccess().getValuereturnAssignment_2_1(), "rule__Blow__ValuereturnAssignment_2_1");
			builder.put(grammarAccess.getOpenAccess().getFunAssignment_0(), "rule__Open__FunAssignment_0");
			builder.put(grammarAccess.getOpenAccess().getValueAssignment_1(), "rule__Open__ValueAssignment_1");
			builder.put(grammarAccess.getOpenAccess().getCompAssignment_2_0(), "rule__Open__CompAssignment_2_0");
			builder.put(grammarAccess.getOpenAccess().getValuereturnAssignment_2_1(), "rule__Open__ValuereturnAssignment_2_1");
			builder.put(grammarAccess.getShutAccess().getFunAssignment_0(), "rule__Shut__FunAssignment_0");
			builder.put(grammarAccess.getShutAccess().getValueAssignment_1(), "rule__Shut__ValueAssignment_1");
			builder.put(grammarAccess.getShutAccess().getCompAssignment_2_0(), "rule__Shut__CompAssignment_2_0");
			builder.put(grammarAccess.getShutAccess().getValuereturnAssignment_2_1(), "rule__Shut__ValuereturnAssignment_2_1");
			builder.put(grammarAccess.getWaitAccess().getFunAssignment_0(), "rule__Wait__FunAssignment_0");
			builder.put(grammarAccess.getWaitAccess().getValueAssignment_1(), "rule__Wait__ValueAssignment_1");
			builder.put(grammarAccess.getWaitAccess().getCompAssignment_2_0(), "rule__Wait__CompAssignment_2_0");
			builder.put(grammarAccess.getWaitAccess().getValuereturnAssignment_2_1(), "rule__Wait__ValuereturnAssignment_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
